{"ast":null,"code":"var _jsxFileName = \"D:\\\\billseye\\\\src\\\\app\\\\expandrow\\\\expandrow.js\";\n\n/* eslint max-len: 0 */\nimport React from 'react';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nconst products = [];\n\nfunction addProducts(quantity) {\n  const startId = products.length;\n\n  for (let i = 0; i < quantity; i++) {\n    const id = startId + i;\n\n    if (i < 3) {\n      products.push({\n        id: id,\n        name: 'Item name ' + id,\n        price: 2100 + i,\n        expand: [{\n          fieldA: 'test1',\n          fieldB: (i + 1) * 99,\n          fieldC: (i + 1) * Math.random() * 100,\n          fieldD: '123eedd' + i\n        }, {\n          fieldA: 'test2',\n          fieldB: i * 99,\n          fieldC: i * Math.random() * 100,\n          fieldD: '123eedd' + i\n        }]\n      });\n    } else {\n      products.push({\n        id: id,\n        name: 'Item name ' + id,\n        price: 2100 + i\n      });\n    }\n  }\n}\n\naddProducts(5);\n\nclass BSTable extends React.Component {\n  render() {\n    if (this.props.data) {\n      return React.createElement(BootstrapTable, {\n        data: this.props.data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(TableHeaderColumn, {\n        dataField: \"fieldA\",\n        isKey: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Field A\"), React.createElement(TableHeaderColumn, {\n        dataField: \"fieldB\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"Field B\"), React.createElement(TableHeaderColumn, {\n        dataField: \"fieldC\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Field C\"), React.createElement(TableHeaderColumn, {\n        dataField: \"fieldD\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"Field D\"));\n    } else {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"?\");\n    }\n  }\n\n}\n\nexport default class ExpandRow extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  isExpandableRow(row) {\n    if (row.id < 3) return true;else return false;\n  }\n\n  expandComponent(row) {\n    return React.createElement(BSTable, {\n      data: row.expand,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    const options = {\n      expandRowBgColor: 'rgb(242, 255, 163)'\n    };\n    return React.createElement(BootstrapTable, {\n      data: products,\n      options: options,\n      expandableRow: this.isExpandableRow,\n      expandComponent: this.expandComponent,\n      expandColumnOptions: {\n        expandColumnVisible: true\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(TableHeaderColumn, {\n      dataField: \"id\",\n      isKey: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Product ID\"), React.createElement(TableHeaderColumn, {\n      dataField: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Product Name\"), React.createElement(TableHeaderColumn, {\n      dataField: \"price\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Product Price\"));\n  }\n\n}","map":{"version":3,"sources":["D:\\billseye\\src\\app\\expandrow\\expandrow.js"],"names":["React","BootstrapTable","TableHeaderColumn","products","addProducts","quantity","startId","length","i","id","push","name","price","expand","fieldA","fieldB","fieldC","Math","random","fieldD","BSTable","Component","render","props","data","ExpandRow","constructor","isExpandableRow","row","expandComponent","options","expandRowBgColor","expandColumnVisible"],"mappings":"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","sourcesContent":["/* eslint max-len: 0 */\r\nimport React from 'react';\r\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\r\n\r\nconst products = [];\r\n\r\nfunction addProducts(quantity) {\r\n  const startId = products.length;\r\n  for (let i = 0; i < quantity; i++) {\r\n    const id = startId + i;\r\n    if (i < 3) {\r\n      products.push({\r\n        id: id,\r\n        name: 'Item name ' + id,\r\n        price: 2100 + i,\r\n        expand: [ {\r\n          fieldA: 'test1',\r\n          fieldB: (i + 1) * 99,\r\n          fieldC: (i + 1) * Math.random() * 100,\r\n          fieldD: '123eedd' + i\r\n        }, {\r\n          fieldA: 'test2',\r\n          fieldB: i * 99,\r\n          fieldC: i * Math.random() * 100,\r\n          fieldD: '123eedd' + i\r\n        } ]\r\n      });\r\n    } else {\r\n      products.push({\r\n        id: id,\r\n        name: 'Item name ' + id,\r\n        price: 2100 + i\r\n      });\r\n    }\r\n  }\r\n}\r\naddProducts(5);\r\n\r\nclass BSTable extends React.Component {\r\n  render() {\r\n    if (this.props.data) {\r\n      return (\r\n        <BootstrapTable data={ this.props.data }>\r\n          <TableHeaderColumn dataField='fieldA' isKey={ true }>Field A</TableHeaderColumn>\r\n          <TableHeaderColumn dataField='fieldB'>Field B</TableHeaderColumn>\r\n          <TableHeaderColumn dataField='fieldC'>Field C</TableHeaderColumn>\r\n          <TableHeaderColumn dataField='fieldD'>Field D</TableHeaderColumn>\r\n        </BootstrapTable>);\r\n    } else {\r\n      return (<p>?</p>);\r\n    }\r\n  }\r\n}\r\n\r\nexport default class ExpandRow extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  isExpandableRow(row) {\r\n    if (row.id < 3) return true;\r\n    else return false;\r\n  }\r\n\r\n  expandComponent(row) {\r\n    return (\r\n      <BSTable data={ row.expand } />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const options = {\r\n      expandRowBgColor: 'rgb(242, 255, 163)'\r\n    };\r\n    return (\r\n      <BootstrapTable data={ products }\r\n        options={ options }\r\n        expandableRow={ this.isExpandableRow }\r\n        expandComponent={ this.expandComponent }\r\n        expandColumnOptions={ { expandColumnVisible: true } }>\r\n        <TableHeaderColumn dataField='id' isKey={ true }>Product ID</TableHeaderColumn>\r\n        <TableHeaderColumn dataField='name'>Product Name</TableHeaderColumn>\r\n        <TableHeaderColumn dataField='price'>Product Price</TableHeaderColumn>\r\n      </BootstrapTable>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}